import{_ as s,C as p,c as t,o as i,j as e,G as l,aj as o,a as r}from"./chunks/framework.CsqNip8P.js";const x=JSON.parse('{"title":"F5刷新页面404","description":"","frontmatter":{},"headers":[],"relativePath":"CCAR/网页刷新报错404.md","filePath":"CCAR/网页刷新报错404.md","lastUpdated":1752292694000}'),d={name:"CCAR/网页刷新报错404.md"};function c(h,a,m,u,g,_){const n=p("ArticleMetadata");return i(),t("div",null,[a[0]||(a[0]=e("h1",{id:"f5刷新页面404",tabindex:"-1"},[r("F5刷新页面404 "),e("a",{class:"header-anchor",href:"#f5刷新页面404","aria-label":'Permalink to "F5刷新页面404"'},"​")],-1)),l(n),a[1]||(a[1]=o(`<p>“单页面应用(SPA)” 经典问题（Vue、React等框架都会遇到）</p><h3 id="问题原因" tabindex="-1">问题原因 <a class="header-anchor" href="#问题原因" aria-label="Permalink to &quot;问题原因&quot;">​</a></h3><p>客户端路由: 在您的网站上，页面切换（比如从首页到登录页 /login）是由浏览器里的 Vue.js 代码在客户端完成的。服务器对此一无所知。🧐</p><p>刷新请求: 假设当您在 <a href="https://www.hyper99.shop/login" target="_blank" rel="noreferrer">https://www.hyper99.shop/login</a> 这个地址上按下刷新时，浏览器会向服务器发送一个请求，要求获取 /login 这个文件。</p><p>服务器响应: 您的 Nginx 服务器在网站根目录里找了一圈，发现并没有一个叫做 login 的文件或文件夹，于是它只能返回 404 Not Found 错误。</p><p><img src="https://yhyper.dpdns.org/photostore/2025/07/image-20250711234923505.png" alt="image-20250711234923505" loading="lazy"></p><h3 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h3><p>解决方法很简单，我们需要告诉 Nginx：“嘿，如果浏览器请求的任何页面你都找不到，别直接报404，统一把 index.html 文件发给它就行了。” 浏览器拿到 index.html 后，里面的 Vue.js 代码就会接管路由，看到地址栏是 /login，就自动为您显示正确的登录页面了。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>location / {</span></span>
<span class="line"><span>    root /www/wwwroot/www.hyper99.shop; # 确保这个路径是您网站的正确根目录</span></span>
<span class="line"><span>    try_files $uri $uri/ /index.html; [!code focus]</span></span>
<span class="line"><span>    index index.html index.htm;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>中间这一行会指示 Nginx 在找不到用户请求的文件或目录时，返回 /index.html 作为后备</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>$uri: 尝试按文件名查找（找一个叫 login 的文件）。</p><p>$uri/: 如果找不到，就尝试按目录名查找（找一个叫 login 的文件夹）。</p><p>/index.html: 如果还找不到，就返回根目录下的 index.html 文件。</p></div><blockquote><p>在PHP-INFO-START前加上即可</p></blockquote><p><img src="https://yhyper.dpdns.org/photostore/2025/07/image-20250712111607691.png" alt="image-20250712111607691" loading="lazy"></p><p>这样， Vue 应用就可以接管路由，正确显示页面内容了</p><p>再次刷新，页面就可以保持原有路由界面或是跳转首页😋</p>`,15))])}const f=s(d,[["render",c]]);export{x as __pageData,f as default};
