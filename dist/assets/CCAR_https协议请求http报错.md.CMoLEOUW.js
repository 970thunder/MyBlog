import{_ as n,C as e,c as p,o as t,j as a,G as l,aj as h,a as r}from"./chunks/framework.CsqNip8P.js";const y=JSON.parse('{"title":"网站https协议请求http报错","description":"","frontmatter":{},"headers":[],"relativePath":"CCAR/https协议请求http报错.md","filePath":"CCAR/https协议请求http报错.md","lastUpdated":1752248405000}'),k={name:"CCAR/https协议请求http报错.md"};function d(o,s,c,E,u,g){const i=e("ArticleMetadata");return t(),p("div",null,[s[0]||(s[0]=a("h1",{id:"网站https协议请求http报错",tabindex:"-1"},[r("网站https协议请求http报错 "),a("a",{class:"header-anchor",href:"#网站https协议请求http报错","aria-label":'Permalink to "网站https协议请求http报错"'},"​")],-1)),l(i),s[1]||(s[1]=h(`<h2 id="报错原文" tabindex="-1">报错原文 <a class="header-anchor" href="#报错原文" aria-label="Permalink to &quot;报错原文&quot;">​</a></h2><blockquote><p>Mixed Content: The page at &#39;<a href="https://www.hyper99.shop/login" target="_blank" rel="noreferrer">https://www.hyper99.shop/login</a>&#39; was loaded over HTTPS, but requested an insecure XMLHttpRequest endpoint &#39;<a href="http://47.122.119.35:9090/api/auth/login" target="_blank" rel="noreferrer">http://47.122.119.35:9090/api/auth/login</a>&#39;. This request has been blocked; the content must be served over HTTPS.</p></blockquote><p>报错原因：最开始前后端代码都是使用http的不安全请求，为了保护用户和数据，我将代码部署到宝塔申请了SSL证书，并且域名托管cloudflare，导致前端https请求后端http代码时触发了浏览器安全策略，请求遭到拦截</p><h2 id="关键词" tabindex="-1">关键词 <a class="header-anchor" href="#关键词" aria-label="Permalink to &quot;关键词&quot;">​</a></h2><ol><li><strong>混合内容（Mixed Content）</strong><ul><li>当 HTTPS 页面通过 HTTP 协议加载子资源（脚本、AJAX、图片等）时触发。</li><li>分类： <ul><li><strong>被动型混合内容</strong>（如图像）：浏览器可能允许加载但会警告。</li><li><strong>主动型混合内容</strong>（如脚本、AJAX）：浏览器<strong>强制阻塞</strong>（本例即属此类）。</li></ul></li></ul></li><li><strong>同源策略（Same-Origin Policy）与内容安全策略（CSP）</strong><ul><li>浏览器要求动态资源（如 <code>XMLHttpRequest</code>）必须与主页面协议一致（HTTPS → HTTPS）。</li></ul></li><li><strong>TLS/SSL 加密（Transport Layer Security）</strong><ul><li>HTTP 请求未加密，可能被中间人攻击（Man-in-the-Middle）窃取敏感数据（如登录凭证）。</li><li><strong>SSL（Secure Sockets Layer）</strong> 是一种用于保护互联网通信的加密协议，后续版本为 <strong>TLS（Transport Layer Security）</strong>。它通过结合对称加密和非对称加密，确保数据的机密性、完整性和身份验证。</li></ul></li></ol><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><p>前端修改代码，将生产环境请求api的url改为https，并重新打包上传，替换原有文件</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    development: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        API_BASE_URL: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:9090/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ALLOWED_ORIGINS: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:5173&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:8080&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    production: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        API_BASE_URL: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ALLOWED_ORIGINS: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.hyper99.shop&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在网站设置中添加反向代理</p><p>原理：让主网站服务器（www.hyper99.shop）接收所有的浏览器请求。</p><ul><li><p>如果请求的是网页、图片等前端资源，服务器就直接返回这些文件。</p></li><li><p>如果请求的是 API（路径以 /api 开头），服务器就将这个请求转发给您真正的后端 API 服务器（<a href="http://47.122.119.35:9090" target="_blank" rel="noreferrer">http://47.122.119.35:9090</a>），然后将后端返回的结果再传回给浏览器。</p></li></ul><p>对于浏览器来说，它始终只在和 <a href="https://www.hyper99.shop" target="_blank" rel="noreferrer">https://www.hyper99.shop</a> 通信，完全不知道后端的存在。这样既安全，又解决了跨域和混合内容的问题。</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>注意不要打开缓存按钮，对于 API 服务来说，它会缓存用户的登录请求、注册请求等敏感操作的结果。（严重的安全问题：比如一个用户可能会看到上一个用户的数据），还会因为缓存了错误的状态（比如缓存了某个 403 或 404 响应）而导致后续所有请求都失败。</p></div><p><img src="https://yhyper.dpdns.org/photostore/2025/07/image-20250711225731050.png" alt="image-20250711225731050" loading="lazy"></p><p><strong>配置代码如下</strong></p><p>添加了：proxy_set_header X-Forwarded-Proto $scheme;请求头，告诉后端原始请求是https的，这对于Spring Security等框架至关重要。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PROXY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">START</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">api</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">api</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    proxy_pass </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//47.122.119.35:9090;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    proxy_set_header Host $host;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    proxy_set_header </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $remote_addr;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    proxy_set_header </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Forwarded</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    proxy_set_header </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Forwarded</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Proto $scheme;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    proxy_set_header Upgrade $http_upgrade;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    proxy_set_header Connection </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;upgrade&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PROXY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">END</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">api</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果使用的是其他 web 服务器（如 Apache），配置方式会所不同，但核心思想是一样的。</p></div><p>设置好前端后，后端对于CORS也要进行配置，“访客白名单”上别忘记贴上自家门牌号</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allowedOrigins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.hyper99.shop&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="网络上的其他方案" tabindex="-1">网络上的其他方案 <a class="header-anchor" href="#网络上的其他方案" aria-label="Permalink to &quot;网络上的其他方案&quot;">​</a></h2><h3 id="方案-1-升级后端服务至-https" tabindex="-1">方案 1：升级后端服务至 HTTPS <a class="header-anchor" href="#方案-1-升级后端服务至-https" aria-label="Permalink to &quot;方案 1：升级后端服务至 HTTPS&quot;">​</a></h3><p>使用 Let&#39;s Encrypt 免费证书或购买商业证书。</p><p>示例（Nginx 配置）：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>server {</span></span>
<span class="line"><span>    listen 443 ssl;</span></span>
<span class="line"><span>    server_name api.hyper99.shop;  # 绑定域名</span></span>
<span class="line"><span>    ssl_certificate /etc/letsencrypt/live/api.hyper99.shop/fullchain.pem;</span></span>
<span class="line"><span>    ssl_certificate_key /etc/letsencrypt/live/api.hyper99.shop/privkey.pem;</span></span>
<span class="line"><span>    location /api/ {</span></span>
<span class="line"><span>        proxy_pass http://localhost:9090;  # 反向代理到后端</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>前端修改请求为 HTTPS</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 正确示例</span></span>
<span class="line"><span>axios.post(&quot;https://api.hyper99.shop/api/auth/login&quot;, data);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="方案-2-使用相对协议" tabindex="-1">方案 2：使用相对协议 <a class="header-anchor" href="#方案-2-使用相对协议" aria-label="Permalink to &quot;方案 2：使用相对协议&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 自动继承页面协议 (HTTPS → HTTPS, HTTP → HTTP)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>axios.post(&quot;//api.hyper99.shop/api/auth/login&quot;, data);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="方案-3-启用-hsts-强制-https" tabindex="-1">方案 3：启用 HSTS（强制 HTTPS） <a class="header-anchor" href="#方案-3-启用-hsts-强制-https" aria-label="Permalink to &quot;方案 3：启用 HSTS（强制 HTTPS）&quot;">​</a></h3><p>在响应头添加：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Strict-Transport-Security: max-age=31536000; includeSubDomains</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>浏览器自动将 HTTP 升级为 HTTPS（需首次访问通过 HTTPS）。</p>`,33))])}const m=n(k,[["render",d]]);export{y as __pageData,m as default};
